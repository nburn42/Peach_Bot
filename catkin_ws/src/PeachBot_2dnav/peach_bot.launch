<launch>

  <master auto="start"/>
  <arg name="map_file" default="$(find peach_bot_2dnav)/blank_map.yaml" />
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />
  <!--- Run AMCL -->
  <!-- <include file="$(find amcl)/examples/amcl_diff.launch" /> -->

  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find peach_bot_2dnav)/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find peach_bot_2dnav)/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find peach_bot_2dnav)/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find peach_bot_2dnav)/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find peach_bot_2dnav)/base_local_planner_params.yaml" command="load" />
    <remap from="odom" to="odometry/filtered" />

  </node>

  <node pkg="tf" type="static_transform_publisher" name="base_to_zed_broadcaster" args="0 0 0 0 0 0 base_link zed_initial_frame 100" />

  <node pkg="tf" type="static_transform_publisher" name="odom_to_zed_boradcaster" args="0 0 0 0 0 0 odom base_link 100" />

  <node pkg="tf" type="static_transform_publisher" name="Zed_to_camera_broadcaster" args="0 0 0 0 0 0 zed_initial_frame camera_depth_frame 100" />
 
  <node name="depthimage_to_laserscan" pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" >
    <!--
    <param name="scan_height" value="10" />
    <param name="range_min" value"0.3" />
    -->
    <param name="ouput_frame_id" value="zed_tracked_frame" />
    <remap from="image" to="/camera/depth/image_raw" />
  </node>


    <!--
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">

        <remap from="cloud_in" to="/camera/point_cloud/cloud"/>
        <remap from="scan" to="/scan"/>
        <rosparam>
            target_frame: camera_link # Leave disabled to output scan in pointcloud frame
            transform_tolerance: 0.01
            min_height: 0.0
            max_height: 1.0

            angle_min: -1.5708 # -M_PI/2
            angle_max: 1.5708 # M_PI/2
            angle_increment: 0.087 # M_PI/360.0
            scan_time: 0.3333
            range_min: 0.45
            range_max: 4.0
            use_inf: true

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 1
        </rosparam>

    </node>
    -->

	<arg name="scan_topic" default="/scan" />

	  <node pkg="gmapping" type="slam_gmapping" name="slam_gmapping" output="screen">

	    <param name="odom_frame" value="odom"/>
	    <param name="base_frame" value="base_link"/>
	    <param name="map_frame" value="map"/>

	    <!-- Process 1 out of every this many scans (set it to a higher number to skip more scans)  -->
	    <param name="throttle_scans" value="1"/>

	    <param name="map_update_interval" value="5.0"/> <!-- default: 5.0 -->

	    <!-- The maximum usable range of the laser. A beam is cropped to this value.  -->
	    <param name="maxUrange" value="5.0"/>

	    <!-- The maximum range of the sensor. If regions with no obstacles within the range of the sensor should appear as free space in the map, set maxUrange < maximum range of the real sensor <= maxRange -->
	    <param name="maxRange" value="10.0"/>

	    <param name="sigma" value="0.05"/>
	    <param name="kernelSize" value="1"/>
	    <param name="lstep" value="0.05"/>
	    <param name="astep" value="0.05"/>
	    <param name="iterations" value="5"/>
	    <param name="lsigma" value="0.075"/>
	    <param name="ogain" value="3.0"/>
	    <param name="minimumScore" value="0.0"/>
	    <!-- Number of beams to skip in each scan. -->
	    <param name="lskip" value="0"/>

	    <param name="srr" value="0.01"/>
	    <param name="srt" value="0.02"/>
	    <param name="str" value="0.01"/>
	    <param name="stt" value="0.02"/>

	    <!-- Process a scan each time the robot translates this far  -->
	    <param name="linearUpdate" value="0.1"/>

	    <!-- Process a scan each time the robot rotates this far  -->
	    <param name="angularUpdate" value="0.05"/>

	    <param name="temporalUpdate" value="-1.0"/>
	    <param name="resampleThreshold" value="0.5"/>

	    <!-- Number of particles in the filter. default 30        -->
	    <param name="particles" value="10"/>

	<!-- Initial map size  -->
	    <param name="xmin" value="-10.0"/>
	    <param name="ymin" value="-10.0"/>
	    <param name="xmax" value="10.0"/>
	    <param name="ymax" value="10.0"/>

	    <!-- Processing parameters (resolution of the map)  -->
	    <param name="delta" value="0.02"/>

	    <param name="llsamplerange" value="0.01"/>
	    <param name="llsamplestep" value="0.01"/>
	    <param name="lasamplerange" value="0.005"/>
	    <param name="lasamplestep" value="0.005"/>

	    <remap from="scan" to="$(arg scan_topic)"/>
	</node>

	<node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization"> 
	    <rosparam command="load" file="$(find peach_bot_2dnav)/robot_localization.yaml" />
	</node>
  <include file="$(find zed_wrapper)/launch/zed_tf.launch" />

  <arg name="svo_file" default=""/>
  
  <group ns="camera">
    <node name="zed_wrapper_node" pkg="zed_wrapper" type="zed_wrapper_node" args="$(arg svo_file)" output="screen">

      <param name="resolution"            value="2" />
      <param name="quality"               value="1" />
      <param name="sensing_mode"          value="1" />
      <param name="frame_rate"            value="60" />
      <param name="odometry_DB"           value="" />
      <param name="openni_depth_mode"     value="0" />

      <param name="rgb_topic"             value="rgb/image_rect_color" />
      <param name="rgb_cam_info_topic"    value="rgb/camera_info" />
      <param name="rgb_frame_id"          value="/zed_tracked_frame" />

      <param name="left_topic"            value="left/image_rect_color" />
      <param name="left_cam_info_topic"   value="left/camera_info" />
      <param name="left_frame_id"         value="/zed_tracked_frame" />

      <param name="right_topic"           value="right/image_rect_color" />
      <param name="right_cam_info_topic"  value="right/camera_info" />
      <param name="right_frame_id"        value="/zed_tracked_frame" />

      <param name="depth_topic"           value="depth/image_raw" />
      <param name="depth_cam_info_topic"  value="depth/camera_info" />
      <param name="depth_frame_id"        value="/zed_tracked_frame" />

      <param name="point_cloud_topic"     value="point_cloud/cloud" />
      <param name="cloud_frame_id"        value="/zed_tracked_frame" />

      <param name="odometry_topic"                value="/zed/odom" />
      <param name="odometry_frame_id"             value="/zed_initial_frame" />
      <param name="odometry_transform_frame_id"   value="/zed_tracked_frame" />

    </node>
  </group>

  <node pkg="rosserial_python" type="serial_node.py" name="serial_node">
    <param name="port" value="/dev/ttyACM0"/>
    <param name="baud" value="57600"/>
  </node>

</launch>
